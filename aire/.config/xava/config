## Configuration file for XAVA. Default values are commented out. Use either ';' or '#' for commenting.

[general]

# Accepts only non-negative values.
framerate = 60

# Keep the application in sync with the monitor to prevent tearing
# This is usually a good idea to enable on Windows because it's system timers are REALLY inaccurate,
# so just letting Windows manage my frametimes does the job just fine
# -1 = adaptive Vsync (G-Sync. FreeSync, etc.), 0 = off, 1 up to refresh rate = Vsync at monitor_refresh_rate/the_value_below
vsync = 1

# 'autosens' will attempt to decrease sensitivity if the bars peak. 1 = on, 0 = off
# new as of 0.6.0 autosens of low values (dynamic range)
# 'overshoot' allows bars to overshoot (in % of display height) without initiating autosens. DEPRECATED as of 0.6.0
autosens = 1
; overshoot = 0

# Manual sensitivity in %. Autosens must be turned off for this to take effect.
# 200 means double height. Accepts only non-negative values.
; sensitivity = 100

# The number of bars (0-200). 0 sets it to auto (put as many as you can).
# Bars' width and space between bars in number of characters.
# These options DO NOT apply if you're using 'sdl' or 'x' modes.
; bars = 0
bar_width = 16
bar_spacing = 4

# Lower and higher cutoff frequencies for lowest and highest bars
# the bandwidth of the visualizer.
# Note: there is a minimum total bandwidth of 43Mhz x number of bars.
# Xava will automatically increase the higher cutoff if a too low band is specified.
; lower_cutoff_freq = 26
; higher_cutoff_freq = 15000

[window]

# Window width and height
width = 2560
height = 240

# Fullscreen toggle (1 = on, 0 = off)
; fullscreen = 1

# Enables or disables window borders (1 = on, 0 = off)
border = 0

# Window transparency toggle (your system must have a compositing WM)
transparency = 1

# Keeps the window under any other (works under X only)
keep_below = 1
override_redirect = 1
# This option removes the ability to interact with the window (works under Xorg only)
interactable = 0

# Set window properties like WM_CLASS (works under X only)
set_win_props = 1

# This allows for the window to be 'aligned' to a part of a screen
# The following positions are supported:
# top_left, top, top_right, left, center, right, bottom_left,
# bottom, bottom_right and none if you don't want manual positioning
alignment = 'bottom_left'

# Additionally we can further adjust the positions if needed (in pixels)
# It moves the window the opposite direction of whats in alignment
# FXP. if alignment is set to right and x_padding is 20, 
# it will move the window left 20 pixels and so on for every direction 
; x_padding = 0
; y_padding = 0

# This option will drastically increase performance (in most cases).
opengl = 1

# Create taskbar icon
; taskbar_icon = 1

# Draw directly on the display itself (Xorg ONLY), VERY UNPREDICTABLE
# You need to stop any form of compositing for this to even work properly
; rootwindow = 0

[input]

# Audio capturing method. Possible methods are: 'pulse', 'alsa', 'fifo' or 'sndio'.
# Defaults to 'pulse', 'alsa' or 'fifo', in that order, dependent on what support xava was built with.
#
# All input methods uses the same config variable 'source'
# to define where it should get the audio.
#
# For pulseaudio 'source' will be the source. Default: 'auto', which uses the monitor source of the default sink
# (all pulseaudio sinks(outputs) have 'monitor' sources(inputs) associated with them).
# 
# For alsa 'source' will be the capture device.
# For fifo 'source' will be the path to fifo-file.
method = pulse
; source = auto

; method = alsa
; source = hw:Loopback,1

; method = fifo
; source = /tmp/mpd.fifo

; method = portaudio
; source = auto

; method = wasapi
; soruce = loopback


[output]

# Output method. Can be any of the following (if supported):
# By default it's the window that is recommended for your platform/OS.
# 'raw' is a 16 bit data stream of the bar heights that can be used to send to other applications.
# 'raw' defaults to 200 bars, which can be adjusted in the 'bars' option above.
# 'sdl' is for a graphical window using OpenGL
# 'x11' is for a graphical window using XRender (usually faster, unsupported in wayland however)
# 'win' is a win32 graphical window (which embedded into the NT kernel)
method = x11

# Visual channels. Can be 'stereo' or 'mono'.
# 'stereo' mirrors both channels with low frequencies in center.
# 'mono' averages both channels and outputs left to right lowest to highest frequencies.
; channels = mono

# Raw output target. A fifo will be created if target does not exist.
; raw_target = /dev/stdout

# Raw data format. Can be 'binary' or 'ascii'.
; data_format = binary

# Binary bit format, can be '8bit' (0-255) or '16bit' (0-65530).
; bit_format = 16bit

# Ascii max value. In 'ascii' mode range will run from 0 to value specified here
; ascii_max_range = 1000

# Ascii delimiters. In ascii format each bar and frame is separated by a delimiters.
# Use decimal value in ascii table (i.e. 59 = ';' and 10 = '\n' (line feed)).
; bar_delimiter = 59
; frame_delimiter = 10

[color]

# Colors can be one of seven predefined: black, blue, cyan, green, magenta, red, white, yellow.
# Or defined by hex code '#xxxxxx' (hex code must be within '').
background = black
; foreground = cyan

# This adjusts the opacity of the bars (must have transparency and OpenGL in order for it to work)
foreground_opacity = 0.4

# And this does the same but for the background 
background_opacity = 0.0

# Gradient mode, only hex defined colors are supported, background must also be defined in hex
# or remain commented out.
# To enable gradients, just change gradient_count to the number of colors you have specified
# You need to enable transparency in order for this to work on X
gradient_count = 2
gradient_color_1 = '#b8c9d6'
; gradient_color_2 = '#17b5d6'
gradient_color_2 = '#ff309e'

[smoothing]

# Percentage value for integral smoothing. Takes values from 0 - 100.
# Higher values means smoother, but less precise. 0 to disable.
integral = 85

# Disables or enables the so-called "Monstercat smoothing" with or without "waves". Set to 0 to disable. 
monstercat = 1.2
waves = 1

# Set gravity percentage for "drop off". Higher values means bars will drop faster.
# Accepts only non-negative values. 50 means half gravity, 200 means double. Set to 0 to disable "drop off".
gravity = 150

# In bar height, bars that would have been lower that this will not be drawn.
; ignore = 0

# Variable logarithm (the higher the value, the more intense) 
; log = 1.55

# Average out the value of each odd bar (just like the monstercat visualizer)
; oddoneout = 1

# Balances the eq towards higher or lower frequencies (lower value->lower frequencies, higher value->higher frequencies)
; eq_balance = 0.67

# Adjusts the input buffer size (in samples, calculated by 2^input_size)
; input_size = 12

# Adjusts the FFT buffer size (calculated by 2^fft_size)
; fft_size = 14

[shadow]

# Fake shadow effect (works with transparency only)
# Make sure that the shadow size is NOT larger then the bar spacing
# To disable shadows, set size to 0
size = 0

# Color format is #aarrggbb
color = "#ff000000"

[eq]

# This one is tricky. You can have as much keys as you want.
# Remember to uncomment more then one key! More keys = more precision.
# Look at readme.md on github for further explanations and examples.
; 1 = 1 # bass
; 2 = 1
; 3 = 1 # midtone
; 4 = 1
; 5 = 1 # treble
